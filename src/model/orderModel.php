<?phpnamespace model;use Exception;include_once '../../config/Dbconnect.php';include_once '../model/productModel.php';class orderModel extends \Dbconnect{    public function createOrders($productId, $productName, $Total, $price, $costumerName, $Address, $Email, $phone, $quantity)    {        // Begin transaction        $this->Connect()->begin_transaction();        try {            // Insert order query            $orderQuery = "INSERT INTO orders(productid, productname, orderamount, unitprice, costumername, address, email, phonenumber, quantity)                        VALUES (?,?,?,?,?,?,?,?,?)";            $stmt = $this->Connect()->prepare($orderQuery);            $stmt->bind_param('isdissssi', $productId, $productName, $Total, $price, $costumerName, $Address, $Email, $phone, $quantity);            if (!$stmt->execute()) {                throw new Exception($stmt->error);            }            // Update stock query            $updateStockQuery = "UPDATE product SET Stack = Stack - ? WHERE product_id = ?";            $updateStmt = $this->Connect()->prepare($updateStockQuery);            $updateStmt->bind_param('ii', $quantity, $productId);            if (!$updateStmt->execute()) {                throw new Exception($updateStmt->error);            }            // Commit transaction            $this->Connect()->commit();            // Return success response            return ['success' => true];        } catch (Exception $e) {            // Rollback transaction on error            $this->Connect()->rollback();            return ['success' => false, 'error' => $e->getMessage()];        }    }    public function displayOrders()    {        $result = $this->Connect()->query(" SELECT  OrderId,ProductName,UnitPrice,quantity,OrderAmount,CostumerName,Status FROM orders");        if ($result->num_rows >0){          $dataRow = [];          while ($row = $result->fetch_assoc()){              $dataRow[] = $row;          }          return $dataRow;        }        return  null;    }    public function countCompleteOrder($status)    {        $query = "select COUNT(orders.OrderId) as orders FROM orders WHERE Status = ?";        $stmt = $this->Connect()->prepare($query);        $stmt->bind_param('s',$status);        $stmt->execute();        $result =$stmt->get_result();        if ($result->num_rows > 0){            $count = $result->fetch_assoc();            return $count['orders'];        }        return  null;    }    public function updateOrderStatus($status,$orderId)    {        $query = "UPDATE orders SET Status = ? WHERE OrderId = ?";        $stmt = $this->Connect()->prepare($query);        $stmt->bind_param('si',$status,$orderId);        if ($stmt->execute()){            echo json_encode(['success' => true, 'message' => 'order is successfully updated']);        }else{            echo json_encode(['success' => false, 'message' => $stmt->error]);        }    } public  function showOrderHistory($email){    $query = "SELECT * FROM orders WHERE Email = ? AND Status != 'Completed'";    $stmt = $this->Connect()->prepare($query);    $stmt->bind_param('s',$email);    $stmt->execute();    $result = $stmt->get_result();    if ($result->num_rows > 0){        $dataRow =[];        while ($row = $result->fetch_assoc()){            $dataRow[] = $row;        }        return $dataRow;    }    return null;}}